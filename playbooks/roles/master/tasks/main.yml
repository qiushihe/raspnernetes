---
- name: Determine Docker cgroup setting
  shell: docker info | grep -i cgroup | sed 's/^[^:]*:\s\(.*\)$/\1/'
  register: docker_cgroup
- debug:
    msg: "Docker cgroup: {{ docker_cgroup.stdout }}"
- name: Determine pre-correction kubelet cgroup parameter
  shell: grep -e "Environment=\"KUBELET_CGROUP_ARGS" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf | sed -n "s/Environment=\"KUBELET_CGROUP_ARGS=--cgroup-driver=\([^\"]*\)\"/\1/p"
  register: kubelet_cgroup_before
- debug:
    msg: "Kubelet cgroup before: {{ kubelet_cgroup_before.stdout }}"
- name: Correct potentially incorrect kubelet cgroup parameter
  replace:
    path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: '^(Environment="KUBELET_CGROUP_ARGS=--cgroup-driver).*$'
    replace: '\1={{ docker_cgroup.stdout }}"'
- name: Determine post-correction kubelet cgroup parameter
  shell: grep -e "Environment=\"KUBELET_CGROUP_ARGS" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf | sed -n "s/Environment=\"KUBELET_CGROUP_ARGS=--cgroup-driver=\([^\"]*\)\"/\1/p"
  register: kubelet_cgroup_after
- debug:
    msg: "Kubelet cgroup after: {{ kubelet_cgroup_after.stdout }}"
- name: Restart kubelet service
  shell: systemctl daemon-reload && service kubelet restart
  when:
    - kubelet_cgroup_before.stdout != kubelet_cgroup_after.stdout
- name: Check if Kubernetes cluster has been initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: admin_conf
- block:
  - name: Initialize cluster with kubeadm
    shell: kubeadm init
  - name: Copy kubernetes config
    shell: mkdir -p $HOME/.kube && cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && chown $(id -u):$(id -g) $HOME/.kube/config
  - name: Determine Kubernetes version in base64
    shell: kubectl version | base64 | tr -d '\n'
    register: kubernetes_version
  - name: Setup pod networking
    shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version={{ kubernetes_version.stdout }}"
  when: admin_conf.stat.exists == False
- name: Obtain cluster joining token
  shell: kubeadm token list | tail -n 1 | awk '{ print $1 }'
  register: kubernetes_join_token
- name: Copy token back out
  copy: content={{ kubernetes_join_token.stdout }} dest={{ playbook_dir }}/../run/join-token.run
  become: no
  delegate_to: localhost
- name: Copy master IP back out
  copy: content={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} dest={{ playbook_dir }}/../run/master-ip.run
  become: no
  delegate_to: localhost
